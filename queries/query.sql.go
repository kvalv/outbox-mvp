// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package queries

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const activateContract = `-- name: ActivateContract :one
UPDATE
    contracts
SET
    active = TRUE
WHERE
    id = $1
RETURNING
    id, title, description, start_date, active, responsible
`

func (q *Queries) ActivateContract(ctx context.Context, id uuid.UUID) (Contract, error) {
	row := q.db.QueryRow(ctx, activateContract, id)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.Active,
		&i.Responsible,
	)
	return i, err
}

const createContract = `-- name: CreateContract :one
INSERT INTO contracts(title, start_date)
    VALUES ($1, $2)
RETURNING
    id, title, description, start_date, active, responsible
`

type CreateContractParams struct {
	Title     string
	StartDate pgtype.Timestamp
}

func (q *Queries) CreateContract(ctx context.Context, arg CreateContractParams) (Contract, error) {
	row := q.db.QueryRow(ctx, createContract, arg.Title, arg.StartDate)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.Active,
		&i.Responsible,
	)
	return i, err
}

const createContractEvent = `-- name: CreateContractEvent :one
INSERT INTO contract_events(contract_id, "type", data)
    VALUES ($1, $2, $3)
RETURNING
    id, contract_id, type, ts, processed, data
`

type CreateContractEventParams struct {
	ContractID string
	Type       string
	Data       []byte
}

func (q *Queries) CreateContractEvent(ctx context.Context, arg CreateContractEventParams) (ContractEvent, error) {
	row := q.db.QueryRow(ctx, createContractEvent, arg.ContractID, arg.Type, arg.Data)
	var i ContractEvent
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Type,
		&i.Ts,
		&i.Processed,
		&i.Data,
	)
	return i, err
}

const deactivateContract = `-- name: DeactivateContract :one
UPDATE
    contracts
SET
    active = FALSE
WHERE
    id = $1
RETURNING
    id, title, description, start_date, active, responsible
`

func (q *Queries) DeactivateContract(ctx context.Context, id uuid.UUID) (Contract, error) {
	row := q.db.QueryRow(ctx, deactivateContract, id)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.Active,
		&i.Responsible,
	)
	return i, err
}

const deleteContract = `-- name: DeleteContract :one
DELETE FROM contracts
WHERE id = $1
RETURNING
    id, title, description, start_date, active, responsible
`

func (q *Queries) DeleteContract(ctx context.Context, id uuid.UUID) (Contract, error) {
	row := q.db.QueryRow(ctx, deleteContract, id)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.Active,
		&i.Responsible,
	)
	return i, err
}

const getContract = `-- name: GetContract :one
SELECT
    id, title, description, start_date, active, responsible
FROM
    contracts
WHERE
    id = $1
`

func (q *Queries) GetContract(ctx context.Context, id uuid.UUID) (Contract, error) {
	row := q.db.QueryRow(ctx, getContract, id)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.Active,
		&i.Responsible,
	)
	return i, err
}

const getContractsForResponsible = `-- name: GetContractsForResponsible :many
SELECT
    id, title, description, start_date, active, responsible
FROM
    contracts
WHERE
    responsible = $1
`

func (q *Queries) GetContractsForResponsible(ctx context.Context, responsible pgtype.UUID) ([]Contract, error) {
	rows, err := q.db.Query(ctx, getContractsForResponsible, responsible)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartDate,
			&i.Active,
			&i.Responsible,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnsentEvents = `-- name: GetUnsentEvents :many
SELECT
    id, contract_id, type, ts, processed, data
FROM
    contract_events
WHERE
    processed = FALSE
    FOR UPDATE SKIP LOCKED
`

func (q *Queries) GetUnsentEvents(ctx context.Context) ([]ContractEvent, error) {
	rows, err := q.db.Query(ctx, getUnsentEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContractEvent
	for rows.Next() {
		var i ContractEvent
		if err := rows.Scan(
			&i.ID,
			&i.ContractID,
			&i.Type,
			&i.Ts,
			&i.Processed,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markEventAsProcessed = `-- name: MarkEventAsProcessed :one
UPDATE
    contract_events
SET
    processed = TRUE
WHERE
    id = $1
RETURNING
    id, contract_id, type, ts, processed, data
`

func (q *Queries) MarkEventAsProcessed(ctx context.Context, id uuid.UUID) (ContractEvent, error) {
	row := q.db.QueryRow(ctx, markEventAsProcessed, id)
	var i ContractEvent
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Type,
		&i.Ts,
		&i.Processed,
		&i.Data,
	)
	return i, err
}

const notifyEvent = `-- name: NotifyEvent :one
select pg_notify('events', $1)
`

func (q *Queries) NotifyEvent(ctx context.Context, pgNotify string) (interface{}, error) {
	row := q.db.QueryRow(ctx, notifyEvent, pgNotify)
	var pg_notify interface{}
	err := row.Scan(&pg_notify)
	return pg_notify, err
}
